// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/handler/handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	io "io"
	http "net/http"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockhttpClient is a mock of httpClient interface.
type MockhttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockhttpClientMockRecorder
}

// MockhttpClientMockRecorder is the mock recorder for MockhttpClient.
type MockhttpClientMockRecorder struct {
	mock *MockhttpClient
}

// NewMockhttpClient creates a new mock instance.
func NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {
	mock := &MockhttpClient{ctrl: ctrl}
	mock.recorder = &MockhttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockhttpClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockhttpClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockhttpClient)(nil).Do), req)
}

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// GetMethod mocks base method.
func (m *MockContext) GetMethod() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMethod")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMethod indicates an expected call of GetMethod.
func (mr *MockContextMockRecorder) GetMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethod", reflect.TypeOf((*MockContext)(nil).GetMethod))
}

// GetRequestBody mocks base method.
func (m *MockContext) GetRequestBody() io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestBody")
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// GetRequestBody indicates an expected call of GetRequestBody.
func (mr *MockContextMockRecorder) GetRequestBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestBody", reflect.TypeOf((*MockContext)(nil).GetRequestBody))
}

// GetURI mocks base method.
func (m *MockContext) GetURI() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURI")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// GetURI indicates an expected call of GetURI.
func (mr *MockContextMockRecorder) GetURI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURI", reflect.TypeOf((*MockContext)(nil).GetURI))
}

// JSON mocks base method.
func (m *MockContext) JSON(code int, obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", code, obj)
}

// JSON indicates an expected call of JSON.
func (mr *MockContextMockRecorder) JSON(code, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockContext)(nil).JSON), code, obj)
}

// SendResponse mocks base method.
func (m *MockContext) SendResponse(response *http.Response, url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendResponse", response, url)
}

// SendResponse indicates an expected call of SendResponse.
func (mr *MockContextMockRecorder) SendResponse(response, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResponse", reflect.TypeOf((*MockContext)(nil).SendResponse), response, url)
}

// Status mocks base method.
func (m *MockContext) Status(code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Status", code)
}

// Status indicates an expected call of Status.
func (mr *MockContextMockRecorder) Status(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockContext)(nil).Status), code)
}
